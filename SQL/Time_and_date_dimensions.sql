 USE ROLE DEV_CDP_CURATED_ADMIN_AZ_SNOWFLAKE_ROLE;
 USE WAREHOUSE DEV_CDP_CURATED_SELECT_WH;
 USE DATABASE DEV_CURATED_SANDBOX_DB;
 USE SCHEMA CUSTOMER_ANALYTICS;

 CREATE OR REPLACE TABLE TIME_TEST as(
 WITH RECURSIVE time_dimension_cte AS (
 SELECT
 1 AS TIME_DIM_ID,
 TIMESTAMP '2020-06-15 00:00:00' AS TIME_OF_DAY,
 TO_CHAR(TIMESTAMP '2020-06-15 00:00:00', 'HH24:MI:SS') AS TIME,
 EXTRACT(HOUR FROM TIMESTAMP '2020-06-15 00:00:00') AS HOUR_OF_DAY_VALUE,
 EXTRACT(MINUTE FROM TIMESTAMP '2020-06-15 00:00:00') AS MINUTE_OF_HOUR_VALUE,
 EXTRACT(SECOND FROM TIMESTAMP '2020-06-15 00:00:00') AS SECOND_OF_MINUTE
 UNION ALL
 SELECT
 TIME_DIM_ID + 1,
 DATEADD(SECOND, 1, TIME_OF_DAY),
 TO_CHAR(DATEADD(SECOND, 1, TIME_OF_DAY), 'HH24:MI:SS'),
 EXTRACT(HOUR FROM DATEADD(SECOND, 1, TIME_OF_DAY)),
 EXTRACT(MINUTE FROM DATEADD(SECOND, 1, TIME_OF_DAY)),
 EXTRACT(SECOND FROM DATEADD(SECOND, 1, TIME_OF_DAY))
 FROM
 time_dimension_cte
 WHERE
 TIME_OF_DAY <= TIMESTAMP '2020-06-15 23:59:59'
 )
 SELECT
 TIME_DIM_ID,
 TIME_OF_DAY,
 TIME,
 HOUR_OF_DAY_VALUE,
 MINUTE_OF_HOUR_VALUE,
 SECOND_OF_MINUTE,
 CURRENT_USER() AS EDW_CREATE_BY_IDENTIFIER
 ,CURRENT_TIMESTAMP AS EDW_CREATE_DATETIME
 ,CURRENT_USER() AS EDW_UPDATE_BY_IDENTIFIER
 ,CURRENT_TIMESTAMP AS EDW_UPDATE_DATETIME
 FROM
 time_dimension_cte);

 INSERT INTO "DEV_CURATED_SANDBOX_DB"."CUSTOMER_ANALYTICS"."TIME_DIM" SELECT * FROM
"DEV_CURATED_SANDBOX_DB"."CUSTOMER_ANALYTICS"."TIME_TEST";


 ALTER SESSION SET WEEK_START = 1;
 SET (START_DATE,END_DATE) = ('1970-01-01','2100-01-01');
 SET NUM_OF_DAYS = (SELECT DATEDIFF(DAY, TO_DATE($START_DATE), TO_DATE($END_DATE)));

 CREATE OR REPLACE TABLE DATE_TEST as
 WITH DATE_TEST AS
 (
 SELECT
 ROW_NUMBER() OVER( ORDER BY SEQ4()) -1 AS DATE_DIM_ID
 ,TO_DATE(DATEADD(DAY,DATE_DIM_ID, TO_DATE($START_DATE))) AS DATE
 FROM
 TABLE(GENERATOR(ROWCOUNT => $NUM_OF_DAYS))
 )
 SELECT
 CONCAT(YEAR(DATE),TO_CHAR(DATE,'MM'),TO_CHAR(DATE,'DD')) AS DATE_DIM_ID
 , DATE AS DATE_DAY
 , DAYOFMONTH(DATE) DAY_OF_MONTH_VALUE
 ,CASE
 WHEN DAY(DATE) % 10 = 1 AND DAY(DATE) != 11 THEN CONCAT(DAY(DATE), 'st')
 WHEN DAY(DATE) % 10 = 2 AND DAY(DATE) != 12 THEN CONCAT(DAY(DATE), 'nd')
 WHEN DAY(DATE) % 10 = 3 AND DAY(DATE) != 13 THEN CONCAT(DAY(DATE), 'rd')
 ELSE CONCAT(DAY(DATE), 'th')
 END AS DAY_SUFFIX_VALUE
 , DECODE(DAYNAME(DATE),
 'Mon','Monday',
 'Tue','Tuesday',
 'Wed', 'Wednesday',
 'Thu','Thursday',
 'Fri', 'Friday',
 'Sat','Saturday',
 'Sun', 'Sunday') AS DAY_NAME
 , DAYOFWEEK(DATE) DAY_OF_WEEK_VALUE
 ,DATEDIFF(DAY, DATE_TRUNC('QUARTER', DATE), DATE) + 1 AS DAY_OF_QUARTER_VALUE
 , DAYOFYEAR(DATE) DAY_OF_YEAR_VALUE
 ,FLOOR((DAYOFMONTH(DATE) - 1) / 7) + 1 AS WEEK_OF_MONTH_VALUE
 , FLOOR((DAYOFMONTH(DATE) - 1) / 7) + 1 + (4 * (QUARTER(DATE) - 1)) AS
WEEK_OF_QUARTER_VALUE
 , WEEKOFYEAR(DATE) WEEK_OF_YEAR_VALUE
 , MONTH(DATE) AS MONTH_VALUE
 , TO_CHAR(DATE,'MMMM') AS MONTH_NAME
 ,MONTH(DATE) - (3 * (QUARTER(DATE) - 1)) AS MONTH_OF_QUARTER_VALUE
 -- , MONTHNAME(DATE) AS MONTH_NAME_ABV
 , QUARTER(DATE) AS QUARTER_VALUE
 , CASE QUARTER(DATE)
 WHEN 1 THEN 'Q1'
 WHEN 2 THEN 'Q2'
 WHEN 3 THEN 'Q3'
 WHEN 4 THEN 'Q4'END AS QUARTER_NAME
 , YEAR(DATE) AS YEAR_VALUE
 , CONCAT(YEAR(DATE),TO_CHAR(DATE,'MM')) AS MONTH_YEAR_VALUE
 , DATEADD(DAY, 1,LAST_DAY( DATEADD(MONTH,-1,DATE),MONTH)) as FIRST_OF_MONTH_DAY
 , LAST_DAY(DATE, MONTH) LAST_OF_MONTH_DAY
 -- , CONCAT(YEAR(DATE),'Q',QUARTER(DATE)) AS YEAR_QUARTER_VALUE
 , DATEADD(DAY, 1,LAST_DAY( DATEADD(QUARTER,-1,DATE),QUARTER)) as FIRST_OF_QUARTER_DAY
 , LAST_DAY(DATE,QUARTER) AS LAST_OF_QUARTER_DAY
 , DATEADD(DAY, 1,LAST_DAY( DATEADD(YEAR,-1,DATE),YEAR)) as FIRST_OF_YEAR_DAY
 , LAST_DAY(DATE,YEAR) AS LAST_OF_YEAR_DAY
 ,CASE
 WHEN MONTH(DATE) >= 4 THEN CONCAT('FY', YEAR(DATE) + 1 - CASE WHEN MONTH(DATE) < 12 THEN
1 ELSE 0 END)
 ELSE CONCAT('FY', YEAR(DATE) - 1)
 END AS FISCAL_PERIOD_NAME
 // ,CASE
 // WHEN MONTH(DATE) = 1 AND DAY(DATE) = 1 THEN 'New Year\'s Day'
 // WHEN MONTH(DATE) = 6 AND DAY(DATE) = 19 THEN 'Juneteenth'
 // WHEN MONTH(DATE) = 7 AND DAY(DATE) = 4 THEN 'Independence Day'
 // WHEN MONTH(DATE) = 11 AND DAY(DATE) = 11 THEN 'Veteran\'s Day'
 // WHEN MONTH(DATE) = 12 AND DAY(DATE) = 24 THEN 'Christmas Eve'
 // WHEN MONTH(DATE) = 12 AND DAY(DATE) = 25 THEN 'Christmas Day'
 // ELSE NULL END AS HOLIDAY_INDICATOR
 ,CASE
 WHEN MONTH(DATE) = 1 AND DAY(DATE) = 1 THEN 'Y'
 WHEN MONTH(DATE) = 6 AND DAY(DATE) = 19 THEN 'Y'
 WHEN MONTH(DATE) = 7 AND DAY(DATE) = 4 THEN 'Y'
 WHEN MONTH(DATE) = 11 AND DAY(DATE) = 11 THEN 'Y'
 WHEN MONTH(DATE) = 12 AND DAY(DATE) = 24 THEN 'Y'
 WHEN MONTH(DATE) = 12 AND DAY(DATE) = 25 THEN 'Y'
 ELSE 'N' END AS HOLIDAY_INDICATOR
 ,CASE WHEN DAY_OF_WEEK_VALUE NOT IN (6,7) THEN TRUE ELSE FALSE END AS WEEKDAY_INDICATOR
 ,CURRENT_USER() AS EDW_CREATE_BY_IDENTIFIER
 ,CURRENT_TIMESTAMP AS EDW_CREATE_DATETIME
 ,CURRENT_USER() AS EDW_UPDATE_BY_IDENTIFIER
 ,CURRENT_TIMESTAMP AS EDW_UPDATE_DATETIME
 FROM DATE_TEST;

 Select * from "DEV_CURATED_SANDBOX_DB"."CUSTOMER_ANALYTICS"."DATE_TEST";